name: Build & Deploy Next.js (standalone) to Azure Web App

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    name: Build (standalone → zip)
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1) Get repo
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Node 20 (match Azure)
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # 3) pnpm 9 + cache
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      # 4) Install using lockfile
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # 5) Disable Next telemetry (optional)
      - name: Disable Next telemetry
        run: npx next telemetry disable

      # 6) Build standalone (ensure next.config.js has: output: 'standalone')
      - name: Build
        env:
          CI: true
        run: pnpm build

      # 7) Prepare deploy bundle (exactly what Azure will run)
      - name: Prepare deploy folder
        run: |
          rm -rf deploy
          mkdir -p deploy/.next
          cp -R .next/standalone/* deploy/
          cp -R .next/static deploy/.next/static
          cp -R public deploy/public 2>/dev/null || true
          cp package.json deploy/

      # 8) Sanity check & list
      - name: Verify deploy folder
        run: |
          test -f "deploy/server.js" || (echo "❌ deploy/server.js not found"; exit 1)
          test -d "deploy/.next/static" || (echo "❌ deploy/.next/static not found"; exit 1)
          du -sh deploy || true
          ls -la deploy | head -n 50

      # 9) Zip bundle (preserves .next/ paths)
      - name: Archive deploy folder
        run: |
          cd deploy
          zip -r ../deploy.zip .
          cd ..
          ls -lh deploy.zip

      # 10) Upload zip as artifact
      - name: Upload artifact (zip)
        uses: actions/upload-artifact@v4
        with:
          name: next-standalone-zip
          path: deploy.zip
          if-no-files-found: error
          retention-days: 7

  deploy:
    name: Deploy to Azure App Service
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write     # required by azure/login
      contents: read

    steps:
      # 1) Download the zip produced in build job
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: next-standalone-zip
          path: .

      # 2) Quick check
      - name: Verify artifact before deploy
        run: |
          test -f "deploy.zip" || (echo "❌ deploy.zip missing"; exit 1)
          ls -lh deploy.zip

      # 3) Auth to Azure (using the exact secrets Azure created for your repo)
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_EA0423EEA1104702A92BD6A83761A8A0 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_D9A7B31FCBFD4F19B99B5DD938A09738 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_E66F17BB1EF64DE1971F9FCAAD0280CF }}

      # 4) Deploy ZIP to your App Service
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'reception-house-frontend'   # <- your App Service name
          slot-name: 'Production'
          package: deploy.zip
